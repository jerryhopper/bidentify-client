# This is a basic workflow to help you get started with Actions

name: BUILDRELEASE

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  release:
    types: [created]
#on:
#  push:
#    branches:
#      - "master"
#      - '!v*'
#      - '!master'
#     - '!master'   # excludes master
#     - '*'         # matches every branch that doesn't contain a '/'
#      - '*/*'       # matches every branch containing a single '/'
#      - '**'        # matches every branch
#  pull_request:
#    branches: [ master ]
#on:
#  push:
#    branches-ignore:
#      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      LOCALAPPDATA: /tmp
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
      - name: Install rarfile
        shell: bash
        run: |
          pip install rarfile
      - name: Script test
        run: python src/bidentify.py
      - name: create pyinstaller executable
        shell: bash
        run: |
          docker run -v "$(pwd)/src:/src/" cdrx/pyinstaller-linux "pyinstaller bidentify.py"
          docker run -v "$(pwd)/src:/src/" cdrx/pyinstaller-windows
          ls -latr src/dist/bidentify

      - name: make zipfile
        shell: bash
        run: |
          cd src/dist/windows
          ls -latr
          zip -r bidentify.zip bidentify
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./src/dist/windows/bidentify.zip
          asset_name: bidentify-${{ steps.get_release.outputs.tag_name }}.zip
          asset_content_type: application/zip


